#!/usr/bin/env node
var lambda = require('../lib/lambda.js')
var apigateway = require('../lib/apigateway.js')
var deploy = require('../lib/deploy.js')
var dataProcess = require('../lib/dataProcess.js')
var packagers = require('../lib/packagers.js')
var cloudwatchevents = require('../lib/cloudwatchevents.js')
var SETTINGS = require('../lib/settings.js').constants
var deployPromise = Promise.resolve()

if (process.argv[2]) {
  if(process.argv[2] == 'deployStandalone'){
    cloudwatchevents.purgeRules()
      .catch((err) => {
        console.log(err.stack)
        process.exit(1)
      })
  }

  if(process.argv[2] == 'deploy'){
    if(!(process.argv[3] && process.argv[3] == 'purgeless'))
      deployPromise.then(apigateway.purgeApi)

    deployPromise.then(packagers.buildUnifiedLambdaFunction)
      .then(lambda.deployLambdaFunction)
      .then(lambda.addResourceBasedPermissionToAPI)
      .then(dataProcess.buildRootResources)
      .then(deploy.deployResources)
      .then((data) => console.log(data))
      .then(apigateway.createDeployment)
      .catch((err) => {
        console.log(err.stack)
        process.exit(1)
      })
  } else if(process.argv[2] == 'runserver') {
    require('../lib/server.js')
  } else if(process.argv[2] == 'run') {
    require('./runner.js')
  } else {
    console.log('Bad argument, value, try again...');
  }
} else {
  console.log('Add super helpfull help here... (so far try to add "deploy" or "runserver" argument)')
}
